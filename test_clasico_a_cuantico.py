import unittest
from clasico_a_cuantico import *
class TestStringMethods(unittest.TestCase):

    def test_potencia(self):
        d=d=[(0,0),(0,0),(1/18,0),(1/9,0),(5/18,0),(5/9,0)],[(0,0),(0,0),(1/9,0),(1/18,0),(5/9,0),(5/18,0)],[(1/9,0),(2/9,0),(1/6,0),(1/3,0),(1/18,0),(1/9,0)],[(2/9,0),(1/9,0),(1/3,0),(1/6,0),(1/9,0),(1/18,0)],[(2/9,0),(4/9,0),(1/9,0),(2/9,0),(0,0),(0,0)],[(4/9,0),(2/9,0),(2/9,0),(1/9,0),(0,0),(0,0)]
        disparo=1
        self.assertEqual(potencia (d,disparo),([(0, 0), (0, 0), (0.05555555555555555, 0), (0.1111111111111111, 0), (0.2777777777777778, 0), (0.5555555555555556, 0)], [(0, 0), (0, 0), (0.1111111111111111, 0), (0.05555555555555555, 0), (0.5555555555555556, 0), (0.2777777777777778, 0)], [(0.1111111111111111, 0), (0.2222222222222222, 0), (0.16666666666666666, 0), (0.3333333333333333, 0), (0.05555555555555555, 0), (0.1111111111111111, 0)], [(0.2222222222222222, 0), (0.1111111111111111, 0), (0.3333333333333333, 0), (0.16666666666666666, 0), (0.1111111111111111, 0), (0.05555555555555555, 0)], [(0.2222222222222222, 0), (0.4444444444444444, 0), (0.1111111111111111, 0), (0.2222222222222222, 0), (0, 0), (0, 0)], [(0.4444444444444444, 0), (0.2222222222222222, 0), (0.2222222222222222, 0), (0.1111111111111111, 0), (0, 0), (0, 0)]))

    def test_experimentos(self):
        v=[(4/5,0),(1/5,0),(0,0),(0,0),(0,0),(0,0)]
        d=[(0,0),(0,0),(1/18,0),(1/9,0),(5/18,0),(5/9,0)],[(0,0),(0,0),(1/9,0),(1/18,0),(5/9,0),(5/18,0)],[(1/9,0),(2/9,0),(1/6,0),(1/3,0),(1/18,0),(1/9,0)],[(2/9,0),(1/9,0),(1/3,0),(1/6,0),(1/9,0),(1/18,0)],[(2/9,0),(4/9,0),(1/9,0),(2/9,0),(0,0),(0,0)],[(4/9,0),(2/9,0),(2/9,0),(1/9,0),(0,0),(0,0)]
        disparo=1
        self.assertEqual (experimentos(d,v,1) , [(0.0, 0.0), (0.0, 0.0), (0.13333333333333333, 0.0), (0.2, 0.0), (0.26666666666666666, 0.0), (0.4, 0.0)])

if __name__ == '__main__':
        unittest.main()
